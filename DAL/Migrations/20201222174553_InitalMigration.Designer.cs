// <auto-generated />
using System;
using DAL;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace DAL.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20201222174553_InitalMigration")]
    partial class InitalMigration
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .UseIdentityColumns()
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.1");

            modelBuilder.Entity("Domain.Board", b =>
                {
                    b.Property<int>("BoardId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<int>("BoardHealth")
                        .HasColumnType("int");

                    b.Property<int>("Height")
                        .HasColumnType("int");

                    b.Property<bool>("ShipsPlacedOnBoard")
                        .HasColumnType("bit");

                    b.Property<int>("Width")
                        .HasColumnType("int");

                    b.HasKey("BoardId");

                    b.ToTable("Boards");
                });

            modelBuilder.Entity("Domain.BoardState", b =>
                {
                    b.Property<int>("BoardStateId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<int>("BoardHealth")
                        .HasColumnType("int");

                    b.Property<int>("BoardId")
                        .HasColumnType("int");

                    b.Property<string>("MoveBoardJsonString")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ShipBoardJsonString")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ShipListJsonString")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("BoardStateId");

                    b.HasIndex("BoardId");

                    b.ToTable("BoardStates");
                });

            modelBuilder.Entity("Domain.Game", b =>
                {
                    b.Property<int>("GameId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<bool>("CurrentPlayerFirst")
                        .HasColumnType("bit");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("EShipsCanTouch")
                        .HasColumnType("int");

                    b.Property<int>("FirstPlayerId")
                        .HasColumnType("int");

                    b.Property<string>("GameName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("NextMoveAfterHit")
                        .HasColumnType("int");

                    b.Property<int>("SecondPlayerId")
                        .HasColumnType("int");

                    b.HasKey("GameId");

                    b.HasIndex("FirstPlayerId")
                        .IsUnique();

                    b.HasIndex("SecondPlayerId")
                        .IsUnique();

                    b.ToTable("Games");
                });

            modelBuilder.Entity("Domain.Player", b =>
                {
                    b.Property<int>("PlayerId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<int>("BoardId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("nvarchar(32)");

                    b.HasKey("PlayerId");

                    b.HasIndex("BoardId")
                        .IsUnique();

                    b.ToTable("Players");
                });

            modelBuilder.Entity("Domain.Ship", b =>
                {
                    b.Property<int>("ShipId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<int>("BoardId")
                        .HasColumnType("int");

                    b.Property<string>("CoordinatesJsonString")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("HealthPoints")
                        .HasColumnType("int");

                    b.Property<bool>("Horizontal")
                        .HasColumnType("bit");

                    b.Property<bool>("IsPlaced")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("nvarchar(32)");

                    b.Property<int?>("PlayerId")
                        .HasColumnType("int");

                    b.Property<int>("ShipSize")
                        .HasColumnType("int");

                    b.HasKey("ShipId");

                    b.HasIndex("PlayerId");

                    b.ToTable("Ships");
                });

            modelBuilder.Entity("Domain.BoardState", b =>
                {
                    b.HasOne("Domain.Board", null)
                        .WithMany("BoardStates")
                        .HasForeignKey("BoardId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Domain.Game", b =>
                {
                    b.HasOne("Domain.Player", "FirstPlayer")
                        .WithOne()
                        .HasForeignKey("Domain.Game", "FirstPlayerId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Domain.Player", "SecondPlayer")
                        .WithOne()
                        .HasForeignKey("Domain.Game", "SecondPlayerId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("FirstPlayer");

                    b.Navigation("SecondPlayer");
                });

            modelBuilder.Entity("Domain.Player", b =>
                {
                    b.HasOne("Domain.Board", "Board")
                        .WithOne()
                        .HasForeignKey("Domain.Player", "BoardId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Board");
                });

            modelBuilder.Entity("Domain.Ship", b =>
                {
                    b.HasOne("Domain.Player", null)
                        .WithMany("ShipTemplate")
                        .HasForeignKey("PlayerId");
                });

            modelBuilder.Entity("Domain.Board", b =>
                {
                    b.Navigation("BoardStates");
                });

            modelBuilder.Entity("Domain.Player", b =>
                {
                    b.Navigation("ShipTemplate");
                });
#pragma warning restore 612, 618
        }
    }
}
